%{

val p0 = (0,0)

fun makeUnaryFunction (name,constr) =
      (name, Syntax.Func (["x"],
			  constr (Syntax.ID ("x",p0),
				  p0),
			  p0))

fun makeBinaryFunction (name,constr) =
      (name, Syntax.Func (["x","y"],
			  constr (Syntax.ID ("x",p0),
				  Syntax.ID ("y",p0),
				  p0),
			  p0))

val predef = List.map makeUnaryFunction
		      [("-",Syntax.UMINUS),
		       ("d",Syntax.D),
		       ("z",Syntax.Z),
		       ("sum",Syntax.SUM),
		       ("count",Syntax.COUNT),
		       ("min",fn (e,p) => Syntax.LEAST (Syntax.NUM (1,p0),e,p)),
		       ("max",fn (e,p) => Syntax.LARGEST (Syntax.NUM (1,p0),e,p)),
		       ("minimal",Syntax.MINIMAL),
		       ("maximal",Syntax.MAXIMAL),
		       ("choose",Syntax.CHOOSE),
		       ("different",Syntax.DIFFERENT) ]
	     @
	     List.map makeBinaryFunction
		      [("+",Syntax.PLUS),
		       ("*",Syntax.TIMES),
		       ("U",Syntax.CONC)]
%}

%token <int*(int*int)> NUM
%token <string*(int*int)> ID
%token <string list *(int*int)> STRINGS
%token <(int*int)> D Z SUM LEAST LARGEST MIN MAX CONC HASH COUNT AND
%token <(int*int)> PLUS MINUS TIMES DIVIDE LPAR RPAR LBRACE RBRACE COMMA
%token <(int*int)> ASSGN EQ NEQ LT GT LE GE DOTDOT SEMI LET IN
%token <(int*int)> FOREACH DO IF THEN ELSE CHOOSE DROP KEEP PICK DIFFERENT MEDIAN
%token <(int*int)> ACCUM REPEAT WHILE UNTIL FUNCTION CALL COMPOSITIONAL EOF
%token <(int*int)> SAMPLE HCONC VCONCL VCONCR VCONCC
%token <(int*int)> QUESTION MINIMAL MAXIMAL SETMINUS
%token <real*(int*int)> REAL

%right SEMI
%nonassoc DO ELSE WHILE UNTIL
%right VCONCL VCONCR VCONCC HCONC
%nonassoc DOTDOT
%left DROP KEEP PICK SETMINUS
%right CONC AND
%left PLUS MINUS
%left TIMES DIVIDE
%nonassoc UMINUS
%nonassoc SUM COUNT LEAST LARGEST MIN MAX CHOOSE DIFFERENT SAMPLE MINIMAL MAXIMAL MEDIAN
%right NEQ EQ LT GT LE GE
%right HASH
%left D Z

%start Dice
%type <Syntax.Program> Dice
%type <string * Syntax.Declaration> Decl
%type <(string * Syntax.Declaration) list> Decls
%type <Syntax.Exp> Exp ExpList ExpList1
%type <Syntax.Exp list> ExpList2
%type <string list> Ids
%type <string> IDorUnop IDorBinop

%%

Dice:
	  Decls Exp Decls EOF	{ ($1 @ $3 @ predef,$2) }
;

Decls:
	  Decl Decls	{ $1 :: $2 }
	|		{ [] }
;

Decl:
	  FUNCTION ID LPAR Ids RPAR EQ Exp
			{ (#1 $2, Syntax.Func ($4, $7, $1)) }
	| COMPOSITIONAL ID LPAR Exp COMMA IDorUnop COMMA IDorBinop RPAR
			{ (#1 $2, Syntax.Comp ($4, $6, $8, $1)) }
;

IDorUnop:
	  ID		{ #1 $1 }
	| MINUS		{ "-" }
	| D		{ "d" }
	| Z		{ "z" }
	| SUM		{ "sum" }
	| COUNT		{ "count" }
	| MIN		{ "min" }
	| MAX		{ "max" }
	| MINIMAL	{ "minimal" }
	| MAXIMAL	{ "maximal" }
	| CHOOSE	{ "choose" }
	| DIFFERENT	{ "different" }
;

IDorBinop:
	  ID		{ #1 $1 }
	| PLUS		{ "+" }
	| TIMES		{ "*" }
	| CONC		{ "U" }
Ids:
	  ID		{ [#1 $1] }
	| ID COMMA Ids	{ #1 $1 :: $3 }
;

Exp:
	  NUM           { Syntax.NUM $1 }
        | ID		{ Syntax.ID $1 }
	| Exp CONC Exp	{ Syntax.CONC ($1,$3, $2) }
	| CHOOSE Exp	{ Syntax.CHOOSE ($2, $1) }
	| DIFFERENT Exp	{ Syntax.DIFFERENT ($2, $1) }
	| LBRACE ExpList RBRACE
			{ $2 }
	| Exp PLUS Exp	{ Syntax.PLUS ($1,$3, $2) }
	| Exp MINUS Exp	{ Syntax.MINUS ($1,$3, $2) }
	| Exp TIMES Exp	{ Syntax.TIMES ($1,$3, $2) }
	| Exp DIVIDE Exp
		     	{ Syntax.DIVIDE ($1,$3, $2) }
	| MINUS Exp %prec UMINUS
			{ Syntax.UMINUS ($2, $1) }
	| D Exp		{ Syntax.D ($2, $1) }
	| Z Exp		{ Syntax.Z ($2, $1) }
	| SUM Exp	{ Syntax.SUM ($2, $1) }
	| COUNT Exp	{ Syntax.COUNT ($2, $1) }
	| LEAST Exp Exp	{ Syntax.LEAST ($2,$3, $1) }
	| MIN Exp	{ Syntax.LEAST (Syntax.NUM (1,$1),$2, $1) }
	| LARGEST Exp Exp
		  	{ Syntax.LARGEST ($2,$3, $1) }
	| MAX Exp	{ Syntax.LARGEST (Syntax.NUM (1,$1),$2, $1) }
        | MEDIAN Exp    { Syntax.MEDIAN ($2, $1) }
	| MINIMAL Exp	{ Syntax.MINIMAL ($2, $1) }
	| MAXIMAL Exp	{ Syntax.MAXIMAL ($2, $1) }
	| Exp HASH Exp	{ Syntax.HASH ($1,$3, $2) }
	| Exp AND Exp	{ Syntax.AND ($1,$3, $2) }
	| Exp D Exp %prec HASH
			{ Syntax.HASH ($1,Syntax.D ($3, $2), $2) }
	| Exp Z Exp %prec HASH
			{ Syntax.HASH ($1,Syntax.Z ($3, $2), $2) }
	| Exp EQ Exp	{ Syntax.EQ ($1,$3, $2) }
	| Exp NEQ Exp	{ Syntax.NEQ ($1,$3, $2) }
	| Exp LT Exp	{ Syntax.LT ($1,$3, $2) }
	| Exp GT Exp	{ Syntax.GT ($1,$3, $2) }
	| Exp LE Exp	{ Syntax.LE ($1,$3, $2) }
	| Exp GE Exp	{ Syntax.GE ($1,$3, $2) }
	| Exp DROP Exp	{ Syntax.DROP ($1,$3, $2) }
	| Exp KEEP Exp	{ Syntax.KEEP ($1,$3, $2) }
	| Exp PICK Exp	{ Syntax.PICK ($1,$3, $2) }
	| Exp SETMINUS Exp
			{ Syntax.SETMINUS ($1,$3, $2) }
	| Exp DOTDOT Exp
			{ Syntax.FROMTO ($1,$3, $2) }
	| ID ASSGN Exp SEMI Exp
		 	{ Syntax.LET (#1 $1,$3,$5, $2) }
	| ACCUM ID ASSGN Exp WHILE Exp
			{ Syntax.ACCUM (#1 $2,$4,$6, true, $1) }
	| ACCUM ID ASSGN Exp UNTIL Exp
			{ Syntax.ACCUM (#1 $2,$4,$6, false, $1) }
	| REPEAT ID ASSGN Exp WHILE Exp
			{ Syntax.REPEAT (#1 $2,$4,$6, true, $1) }
	| REPEAT ID ASSGN Exp UNTIL Exp
			{ Syntax.REPEAT (#1 $2,$4,$6, false, $1) }
	| FOREACH ID IN Exp DO Exp
		 	{ Syntax.FOREACH (#1 $2,$4,$6, $1) }
	| IF Exp THEN Exp ELSE Exp
		 	{ Syntax.IF ($2,$4,$6, $1) }
	| CALL ID LPAR ExpList2 RPAR
			{ Syntax.CALL (#1 $2, $4, $1) }
	| STRINGS       { let
                            val pos = #2 $1
                            fun build [] = Syntax.STRING ("",pos)
                              | build [s] = Syntax.STRING (s,pos)
                              | build ("|>" :: ss) =
                                  Syntax.VCONCL(Syntax.STRING ("",pos),
                                                build ss,pos)
                              | build ("<|" :: ss) =
                                  Syntax.VCONCR(Syntax.STRING ("",pos),
                                                build ss,pos)
                              | build ("<>" :: ss) =
                                  Syntax.VCONCC(Syntax.STRING ("",pos),
                                                build ss,pos)
                              | build ("||" :: ss) =
                                  Syntax.HCONC(Syntax.STRING ("",pos),
                                               build ss,pos)
                              | build (s :: "|>" :: ss) =
                                  Syntax.VCONCL(Syntax.STRING (s,pos),
                                                build ss,pos)
                              | build (s :: "<|" :: ss) =
                                  Syntax.VCONCR(Syntax.STRING (s,pos),
                                                build ss,pos)
                              | build (s :: "<>" :: ss) =
                                  Syntax.VCONCC(Syntax.STRING (s,pos),
                                                build ss,pos)
                              | build (s :: "||" :: ss) =
                                  Syntax.HCONC(Syntax.STRING (s,pos),
                                               build ss,pos)
                              | build (s :: ss) =
                                  Syntax.HCONC(Syntax.STRING (s,pos),
                                               build ss,pos)
                          in
                            build (#1 $1)
                          end
                        }
        | SAMPLE Exp    { Syntax.SAMPLE ($2, $1) }
        | Exp SAMPLE Exp %prec HASH
	                { Syntax.SAMPLES ($1, $3, $2) }
        | Exp HCONC Exp { Syntax.HCONC ($1,$3,$2) }
        | Exp VCONCL Exp { Syntax.VCONCL ($1,$3,$2) }
        | Exp VCONCR Exp { Syntax.VCONCR ($1,$3,$2) }
        | Exp VCONCC Exp { Syntax.VCONCC ($1,$3,$2) }
	| QUESTION REAL	{ Syntax.QUESTION (#1 $2, $1) }
	| LPAR Exp RPAR	{ $2 }
;

ExpList:
	  		{ Syntax.EMPTY }
	| ExpList1	{ $1 }
;

ExpList1:
	  Exp		{ $1 }
	| Exp COMMA ExpList1
			{ Syntax.CONC ($1,$3, $2) }
;

ExpList2:
	  Exp		{ [$1] }
	| Exp COMMA ExpList2
			{ $1 :: $3 }
;
